Q1. We'll pass you an array of two numbers. Return the sum of those two numbers plus the sum of all the numbers between them. The lowest number will not always come first.

Ans. function sumAll(arr) {
  let max = Math.max( arr[0], arr[1]);
  let min = Math.min (arr[0], arr[1]);
  let sumBetween = 0;
  for (let i = min; i <= max; i++) {
    sumBetween +=  i;
  }
  return sumBetween;
}

sumAll([1, 4]);

******************************

Q2. Compare two arrays and return a new array with any items only found in one of the two given arrays, but not both. In other words, return the symmetric difference of the two arrays.

Ans. function diffArray(arr1, arr2) {
  const difference = new Set(arr1);
  arr2.forEach((ele) => 
  difference.has(ele) ? difference.delete(ele) : difference.add(ele));
  return Array.from(difference);
}

diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);

********************

Q3. You will be provided with an initial array (the first argument in the destroyer function), followed by one or more arguments. Remove all elements from the initial array that are of the same value as these arguments.

Ans. function destroyer(arr, ...valsToRemove) {
  return arr.filter(elem => !valsToRemove.includes(elem));
}

destroyer([1, 2, 3, 1, 2, 3], 2, 3);

**************************
Q4. For example, if the first argument is [{ first: "Romeo", last: "Montague" }, { first: "Mercutio", last: null }, { first: "Tybalt", last: "Capulet" }], and the second argument is { last: "Capulet" }, then you must return the third object from the array (the first argument), because it contains the name and its value, that was passed on as the second argument.

Ans. function whatIsInAName(collection, source) {
  const souceKeys = Object.keys(source);

  return collection .filter(obj => souceKeys
  .map(key => obj.hasOwnProperty(key) && obj[key] === source[key])
  .reduce((a, b) =>  a && b));

}

whatIsInAName([{ first: "Romeo", last: "Montague" }, { first: "Mercutio", last: null }, { first: "Tybalt", last: "Capulet" }], { last: "Capulet" });

***************************
Q5. Convert a string to spinal case. Spinal case is all-lowercase-words-joined-by-dashes.

Ans. function spinalCase(str) {
  return str
  .split(/\s|_|(?=[A-Z])/)
  .join("-")
  .toLowerCase();
}

spinalCase('This Is Spinal Tap');

***********************

Q6. Translate the provided string to Pig Latin. Input strings are guaranteed to be English words in all lowercase.
Ans. function translatePigLatin(str) {
  return str
  .replace(/^[aeiou]\w*/, "$&way")
  .replace(/(^[^aeiou]+)(\w*)/, "$2$1ay");
}

translatePigLatin("consonant");

*******************

Q7.Preserve the case of the first character in the original word when you are replacing it. For example if you mean to replace the word Book with the word dog, it should be replaced as Dog

Ans. function myReplace(str, before, after) {
  var index = str.indexOf(before);

  if(str[index] === str[index].toUpperCase()) {
    after = after.charAt(0).toUpperCase() + after.slice(1);
  }else {
    after = after.charAt(0).toLowerCase() + after.slice(1);
  }
  str= str.replace(before, after)
  return str;
}

myReplace("A quick brown fox jumped over the lazy dog", "jumped", "leaped");

***********************

Q8. The character and its pair are paired up in an array, and all the arrays are grouped into one encapsulating array.

Ans.function pairElement(str) {
const matchWithBasePair = function(char){
  switch (char) {
    case "A":
    return["A", "T"];
     case "T":
    return["T", "A"];
     case "C":
    return["C", "G"];
     case "G":
    return["G", "C"];
    
  }
};

const pairs = [];
for(let i = 0; i < str.length; i++) {
  pairs.push(matchWithBasePair(str[i]));
}

  return pairs;
}

pairElement("GCG");

***************************

Q9. If all letters are present in the range, return undefined.

Ansfunction fearNotLetter(str) {
  for (let i = 1; i < str.length; ++i) {
    if (str.charCodeAt(i) - str.charCodeAt(i - 1) > 1){
      return String.fromCharCode(str.charCodeAt(i - 1) + 1)
    }
  }
}

fearNotLetter("abce");

*************************

Q10. he unique numbers should be sorted by their original order, but the final array should not be sorted in numerical order.

Check the assertion tests for examples.

Ans. function uniteUnique(arr) {
  return [...arguments]
  .flat()
  .filter((item, ind, arr) => arr.indexOf(item) === ind);
}

uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);

******************

Q11. Convert the characters &, <, >, " (double quote), and ' (apostrophe), in a string to their corresponding HTML entities.

Ans. function convertHTML(str) {
  const htmlEntities = {
 "&": "&amp;",
 "<": "&lt;",
 ">": "&gt;",
 '"': "&quot;",
 "'": "&apos;"  };


return str.replace(/([&<>\"'])/g,  match => htmlEntities [match]);

}

convertHTML("Dolce & Gabbana");

******************************

Q12. Given a positive integer num, return the sum of all odd Fibonacci numbers that are less than or equal to num.

The first two numbers in the Fibonacci sequence are 1 and 1. Every additional number in the sequence is the sum of the two previous numbers. The first six numbers of the Fibonacci sequence are 1, 1, 2, 3, 5 and 8.

For example, sumFibs(10) should return 10 because all odd Fibonacci numbers less than or equal to 10 are 1, 1, 3, and 5.

ANS. function sumFibs(num) {
 let prevNumber = 0;
 let currNumber = 1;
 let result = 0;

 while(currNumber <= num){
   if (currNumber % 2 !== 0)
   {
     result += currNumber;
   }
   currNumber += prevNumber;
    prevNumber = currNumber - prevNumber;
 }
 return result;
}

sumFibs(4);

**************************

Q13. A prime number is a whole number greater than 1 with exactly two divisors: 1 and itself. For example, 2 is a prime number because it is only divisible by 1 and 2. In contrast, 4 is not prime since it is divisible by 1, 2 and 4.

Rewrite sumPrimes so it returns the sum of all prime numbers that are less than or equal to num.


Ans. function sumPrimes(num) {
  let primes = [];
  for (let i = 2; i <= num; i++) {
    if (primes.every((prime) => i %  prime  !==0))
    primes.push(i);
  }
  return primes.reduce((sum, prime) => sum + prime, 0)
}

sumPrimes(10);

*******************************
Q14. Find the smallest common multiple of the provided parameters that can be evenly divided by both, as well as by all sequential numbers in the range between these parameters.

The range will be an array of two numbers that will not necessarily be in numerical order.

For example, if given 1 and 3, find the smallest common multiple of both 1 and 3 that is also evenly divisible by all numbers between 1 and 3. The answer here would be 6.

Ans. 
