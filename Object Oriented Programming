Q1. Create a dog object with name and numLegs properties, and set them to a string and a number, respectively.

Ans.let dog = {
name: " ",
numLegs: 2
};

******************

Q2.Print both properties of the dog object to your console.
Ans. let dog = {
  name: "Spot",
  numLegs: 4
};
// Only change code below this line
console.log(dog.name, dog.numLegs)
************************

Q3. Using the dog object, give it a method called sayLegs. The method should return the sentence This dog has 4 legs.
Ans.
dog.sayLegs();let dog = {
  name: "Spot",
  numLegs: 4,
  sayLegs: function() {
    return "This dog has " + dog.numLegs + " legs.";
  }  
};

dog.sayLegs();

*********************
Q4. Modify the dog.sayLegs method to remove any references to dog. Use the duck example for guidance.
Ans.let dog = {
  name: "Spot",
  numLegs: 4,
  sayLegs: function() {return "This dog has " + this.numLegs + " legs.";}
};

dog.sayLegs();
****************

Q5.Create a constructor, Dog, with properties name, color, and numLegs that are set to a string, a string, and a number, respectively.

Ans.function Dog() {
  this.name = "Albert";
  this.color = "blue";
  this.numLegs = 2;
  }

***************

Q.6Use the Dog constructor from the last lesson to create a new instance of Dog, assigning it to a variable hound.
Ans.function Dog() {
  this.name = "Rupert";
  this.color = "brown";
  this.numLegs = 4;
}
// Only change code below this line

let hound = new Dog();
****************

Q7 .Create another Dog constructor. This time, set it up to take the parameters name and color, and have the property numLegs fixed at 4. Then create a new Dog saved in a variable terrier. Pass it two strings as arguments for the name and color properties.

Ans.function Dog(name, color) {
  this.name = name;
  this.color = color;
  this.numLegs = 4;
}
let terrier = new Dog("George", "White");

*********************

Q8. Create a new instance of the House constructor, calling it myHouse and passing a number of bedrooms. Then, use instanceof to verify that it is an instance of House.

Ans. function House(numBedrooms) {
  this.numBedrooms = numBedrooms;
}

// Only change code below this line

let myHouse = new House (2)
myHouse instanceof House;

**********************

Q9. Add the own properties of canary to the array ownProps.
Ans. function Bird(name) {
  this.name = name;
  this.numLegs = 2;
}

let canary = new Bird("Tweety");
let ownProps = [];

for (let property in canary) {
  if(canary.hasOwnProperty(property)){
    ownProps.push(property);
  }
}
// Only change code below this line

************************

Q10.Add a numLegs property to the prototype of Dog
Ans.function Dog(name) {
  this.name = name;
}

Dog.prototype.numLegs = 4

// Only change code above this line
let beagle = new Dog("Snoopy");


Q11. Add all of the own properties of beagle to the array ownProps. Add all of the prototype properties of Dog to the array prototypeProps.
function Dog(name) {
  this.name = name;
}

Dog.prototype.numLegs = 4;

let beagle = new Dog("Snoopy");

let ownProps = [];
let prototypeProps = [];

for (let property in beagle) {
  if (beagle.hasOwnProperty(property)){
    ownProps.push(property);
  }
  else {
    prototypeProps.push(property);
  }
}

********************************
Q13. Write a joinDogFraternity function that takes a candidate parameter and, using the constructor property, return true if the candidate is a Dog, otherwise return false.
Ans. function Dog(name) {
  this.name = name;
}

// Only change code below this line
function joinDogFraternity(candidate) {
if (candidate.constructor === Dog) {
  return true;
}else {
  return false;
}
}
*****************
Q14. Add the property numLegs and the two methods eat() and describe() to the prototype of Dog by setting the prototype to a new object.

Ans. function Dog(name) {
  this.name = name;
}

Dog.prototype = {
  // Only change code below this line
numLegs:4,
eat: function() {
},
describe: function() {
}
};

********************************

Q15. Define the constructor property on the Dog prototype.
Ans. function Dog(name) {
  this.name = name;
}

// Only change code below this line
Dog.prototype = {
constructor: Dog,
  numLegs: 4,
  eat: function() {
    console.log("nom nom nom");
  },
  describe: function() {
    console.log("My name is " + this.name);
  }
};

******************

Q. 16. Use isPrototypeOf to check the prototype of beagle.

Ans. function Dog(name) {
  
  this.name = name;
}

let beagle = new Dog("Snoopy");

// Only change code below this line

Dog.prototype.isPrototypeOf(beagle)

*************************

Q17. Modify the code to show the correct prototype chain.
Ans. function Dog(name) {
  this.name = name;
}

let beagle = new Dog("Snoopy");

Dog.prototype.isPrototypeOf(beagle);  // yields true

// Fix the code below so that it evaluates to true
Object.prototype.isPrototypeOf(Dog.prototype);

*********************

Q15. The eat method is repeated in both Cat and Bear. Edit the code in the spirit of DRY by moving the eat method to the Animal supertype.

Ans.function Cat(name) {
  this.name = name;
}

Cat.prototype = {
  constructor: Cat,
   
};

function Bear(name) {
  this.name = name;
}

Bear.prototype = {
  constructor: Bear,
  
};

function Animal() { }

Animal.prototype = {
  constructor: Animal,
  eat: function() {
 console.log("nom nom nom");
  }

};

******************************

Q18.Use Object.create to make two instances of Animal named duck and beagle.


Ans.function Animal() { }

Animal.prototype = {
  constructor: Animal,
  eat: function() {
    console.log("nom nom nom");
  }
};

// Only change code below this line

let duck = Object.create(Animal.prototype)
let beagle = Object.create(Animal.prototype)


 duck instanceof  Animal;
 beagle instanceof  Animal; // Change this line
// Change this line

*********************
Q19. Modify the code so that instances of Dog inherit from Animal.

Ans.function Animal() { }

Animal.prototype = {
  constructor: Animal,
  eat: function() {
    console.log("nom nom nom");
  }
};

function Dog() { }

// Only change code below this line
Dog.prototype = Object.create(Animal.prototype);

let beagle = new Dog();
beagle.eat();

************************

Q20. Fix the code so duck.constructor and beagle.constructor return their respective constructors.
Ans. function Animal() { }
function Bird() { }
function Dog() { }

Bird.prototype = Object.create(Animal.prototype);
Dog.prototype = Object.create(Animal.prototype);

// Only change code below this line



let duck = new Bird();
Bird.prototype.constructor = Bird;
duck.constructor 
let beagle = new Dog();
Dog.prototype.constructor = Dog;
beagle.constructor

********************
