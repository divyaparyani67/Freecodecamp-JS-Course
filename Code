Q.Golf Code
In the game of Golf, each hole has a par, meaning, the average number of strokes a golfer is expected to make in order to sink the ball in the hole to complete the play. Depending on how far above or below par your strokes are, there is a different nickname.

Your function will be passed par and strokes arguments. Return the correct string according to this table which lists the strokes in order of priority; top (highest) to bottom (lowest):
const names = ["Hole-in-one!", "Eagle", "Birdie", "Par", "Bogey", "Double Bogey", "Go Home!"];

ANS. function golfScore(par, strokes) {
  // Only change code below this line
if (strokes == 1) {
return names[0]
}
else if (strokes <= par - 2) {
  return  names[1]
}
else if (strokes == par - 1 ){
return names[2]
}
else if (strokes == par) {
  return names[3]
}
else if (strokes == par + 1){
  return names[4]
}
else if (strokes == par + 2){
  return names[5]
}
else if (strokes >= par + 3){
  return names[6]
}
  return "Change Me";
  // Only change code above this line
}

golfScore(5, 4);


 *********

Q.In a switch statement you may not be able to specify all possible values as case statements. Instead, you can add the default statement which will be executed if no matching case statements are found. Think of it like the final else statement in an if/else chain.

A default statement should be the last case.

ANS. function switchOfStuff(val) {
  let answer = "";
  // Only change code below this line
switch (val) {
  case "a":
  answer = "apple";
  break;
     
     case "b":
     answer = "bird";
     break;
         
         case "c":
         answer = "cat";
         break;
              default:
                 answer = "stuff";
                 break;


}


  // Only change code above this line
  return answer;
}

switchOfStuff(1);

 ************

Q. If you have many options to choose from, use a switch statement. A switch statement tests a value and can have many case statements which define various possible values. Statements are executed from the first matched case value until a break is encountered.


ANS. function caseInSwitch(val) {
  let answer = "";
  // Only change code below this line
 switch(val) {
   witch(val) {
   case 1:
   answer = "alpha";
   break;
   case 2:
   answer = "beta";
   break;
   case 3:
   answer = "gamma";
   break;
   case 4:
   answer = "delta";
   break;

 }


  // Only change code above this line
  return answer;
}

caseInSwitch(1);


************



Q. Write a switch statement to set answer for the following ranges:
1-3 - Low
4-6 - Mid
7-9 - High

Ans. function sequentialSizes(val) {
  let answer = "";
  // Only change code below this line
 switch(val) {

   case 1:
   case 2:
   case 3:
       answer = "Low";
       break;
    case 4:
    case 5:
    case 6:
       answer = "Mid";
       break;
   case 7:
   case 8:
   case 9:
      answer = "High";
      break;   
 }
 
 
  // Only change code above this line
  return answer;
}

sequentialSizes(1);


********
Q. If you have many options to choose from, a switch statement can be easier to write than many chained if/else if statements. The following:

ANS. function chainToSwitch(val) {
  let answer = "";
  // Only change code below this line

  switch (val) {
    case  "bob": 
    answer = "Marley";
    break;
     case  42:
    answer = "The Answer";
    break;
   case 1: 
    answer = "There is no #1";
    break;
  case 99: 
    answer = "Missed me by this much!";
    break;
   case 7: 
    answer = "Ate Nine";
    break;
  }
  // Only change code above this line
  return answer;

  }
chainToSwitch(7);



***********


Q. You may recall from Comparison with the Equality Operator that all comparison operators return a boolean true or false value.

Sometimes people use an if/else statement to do a comparison, like this:

function isLess(a, b) {
  // Only change code below this line
  
    return  a < b ;
   
  // Only change code above this line
}

isLess(10, 15);

*******

Q. When a return statement is reached, the execution of the current function stops and control returns to the calling location.

ANs. // Setup
function abTest(a, b) {
  // Only change code below this line

if (a < 0 || b < 0) {
  return undefined
}

  // Only change code above this line

  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));
}

abTest(2,2);

*********

Q. Counting Cards
In the casino game Blackjack, a player can determine whether they have an advantage on the next hand over the house by keeping track of the relative number of high and low cards remaining in the deck. This is called Card Counting.

Having more high cards remaining in the deck favors the player. Each card is assigned a value according to the table below. When the count is positive, the player should bet high. When the count is zero or negative, the player should bet low.

Ans. let count = 0;

function cc(card) {
  // Only change code below this line

  switch (card) {

    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
     count++;
     break;
     case 10:
    case "J":
    case "A":
    case "K":
    case "Q":
     count--;
     break;
  }

  var holdbet = "Hold";
  if (count > 0) {
    holdbet = "Bet";
  }

  return count + " " + holdbet;

  // Only change code above this line
}

cc(2); cc(3); cc(7); cc('K'); cc('A');

*********

Q. You may have heard the term object before.

Objects are similar to arrays, except that instead of using indexes to access and modify their data, you access the data in objects through what are called properties.

Objects are useful for storing data in a structured way, and can represent real world objects, like a cat.

Ans. const myDog = {
  // Only change code below this line
 "name": " Bruno",
 "tails": 1,
 "legs": 4,
 "friends": [ "MAngu"]

  // Only change code above this line
};

********

Q. There are two ways to access the properties of an object: dot notation (.) and bracket notation ([]), similar to an array.

Dot notation is what you use when you know the name of the property you're trying to access ahead of time.

Here is a sample of using dot notation (.) to read an object's property:

Ans. // Setup
const testObj = {
  "hat": "ballcap",
  "shirt": "jersey",
  "shoes": "cleats"
};

// Only change code below this line
const hatValue = testObj.hat;      // Change this line
const shirtValue = testObj.shirt;    // Change this line


***********

Q.Accessing Object Properties with Bracket Notation
The second way to access the properties of an object is bracket notation ([]). If the property of the object you are trying to access has a space in its name, you will need to use bracket notation.

However, you can still use bracket notation on object properties without spaces.

Here is a sample of using bracket notation to read an object's property:

Ans. // Setup
const testObj = {
  "an entree": "hamburger",
  "my side": "veggies",
  "the drink": "water"
};

// Only change code below this line
const entreeValue = testObj["an entree"];   // Change this line
const drinkValue = testObj["the drink"];    // Change this line

*********
Q.Accessing Object Properties with Variables
Another use of bracket notation on objects is to access a property which is stored as the value of a variable. This can be very useful for iterating through an object's properties or when accessing a lookup table.

Here is an example of using a variable to access a property:
Ans. // Setup
const testObj = {
  12: "Namath",
  16: "Montana",
  19: "Unitas"
};

// Only change code below this line
const playerNumber = 16;  // Change this line
const player = testObj[playerNumber];   // Change this line


*********

Q. After you've created a JavaScript object, you can update its properties at any time just like you would update any other variable. You can use either dot or bracket notation to update.

Ans. // Setup
// Setup
const myDog = {
  "name": "Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};

// Only change code below this line

myDog.name = "Happy Coder";

************
Q.  You can add new properties to existing JavaScript objects the same way you would modify them.

Here's how we would add a bark property to ourDog:
Ans. const myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};

myDog.bark ="woof";


************

Q. Delete Properties from a JavaScript Object
delete ourDog.bark;

Ans. // Setup
const myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"],
  "bark": "woof"
};

// Only change code below this line

delete myDog.tails;


**********
Q. Objects can be thought of as a key/value storage, like a dictionary. If you have tabular data, you can use an object to lookup values rather than a switch statement or an if/else chain. This is most useful when you know that your input data is limited to a certain range.

Ans. // Setup
function phoneticLookup(val) {
  let result = "";

  // Only change code below this line
  var lookup = {
    "alpha": "Adams",
       "bravo": "Boston",
      "charlie": "Chicago",
       "delta": "Denver",
       "echo":"Easy",
      "foxtrot": "Frank"
  
  }
  result  = lookup[val];

    return result;


  // Only change code above this line
}

phoneticLookup("charlie");


********
Q. Sometimes it is useful to check if the property of a given object exists or not. We can use the .hasOwnProperty(propname) method of objects to determine if that object has the given property name. .hasOwnProperty() returns true or false if the property is found or not.

Ans. function checkObj(obj, checkProp) {
  // Only change code below this line
  if (obj.hasOwnProperty(checkProp)){ 
  return obj[checkProp];
} else {
  return "Not Found"
}
  // Only change code above this line
}

**********

Q. Sometimes you may want to store data in a flexible Data Structure. A JavaScript object is one way to handle flexible data. They allow for arbitrary combinations of strings, numbers, booleans, arrays, functions, and objects.

Here's an example of a complex data structure:

Ans. const myMusic = [
  {
    "artist": "Billy Joel",
    "title": "Piano Man",
    "release_year": 1973,
    "formats": [
      "CD",
      "8T",
      "LP"
    ],
    "gold": true
  },
     { "artist": "Arijit Singh",
    "title": "Singer",
    "release_year": 1975,
    "formats": [
      "OTT",
      "SongsPK",
      "Youtube"
    ],
    
  }
];

***************
Q. The sub-properties of objects can be accessed by chaining together the dot or bracket notation.


Ans. const myStorage = {
  "car": {
    "inside": {
      "glove box": "maps",
      "passenger seat": "crumbs"
     },
    "outside": {
      "trunk": "jack"
    }
  }
};

var gloveBoxContents =myStorage.car.inside["glove box"];


********************
Q. As we have seen in earlier examples, objects can contain both nested objects and nested arrays. Similar to accessing nested objects, array bracket notation can be chained to access nested arrays.

Ans. const myPlants = [
  {
    type: "flowers",
    list: [
      "rose",
      "tulip",
      "dandelion"
    ]
  },
  {
    type: "trees",
    list: [
      "fir",
      "pine",
      "birch"
    ]
  }
];

const secondTree = myPlants[1].list[1]; 


**********
Q. You are given an object literal representing a part of your musical album collection. Each album has a unique id number as its key and several other properties. Not all albums have complete information.

You start with an updateRecords function that takes an object literal, records, containing the musical album collection, an id, a prop (like artist or tracks), and a value. Complete the function using the rules below to modify the object passed to the function.

Ans. const recordCollection = {
  2548: {
    albumTitle: 'Slippery When Wet',
    artist: 'Bon Jovi',
    tracks: ['Let It Rock', 'You Give Love a Bad Name']
  },
  2468: {
    albumTitle: '1999',
    artist: 'Prince',
    tracks: ['1999', 'Little Red Corvette']
  },
  1245: {
    artist: 'Robert Palmer',
    tracks: []
  },
  5439: {
    albumTitle: 'ABBA Gold'
  }
};

// Only change code below this line
function updateRecords(records, id, prop, value) {
  // Access target album in record collection
  const album = records[id];

  // If value is an empty string,
  //  delete the given prop property from the album
  if (value === "") {
    delete album[prop];
  }
  // If prop isn't tracks,
  //  update or set that album's prop to value
  else if (prop !== "tracks") {
    album[prop] = value;
  }
  // If prop is tracks,
  //  add value to the end of the album's existing tracks array
  else {
    album["tracks"] = album["tracks"] || [];
    album["tracks"].push(value);
  }

  // Your function must always return the entire record collection object
  return records;
}
  


updateRecords(recordCollection, 5439, 'artist', 'ABBA');


***********

Q. You can run the same code multiple times by using a loop.

The first type of loop we will learn is called a while loop because it runs while a specified condition is true and stops once that condition is no longer true.
Ans. // Setup
var myArray = [];

// Only change code below this line

var i = 5;

while( i >= 0 ) {
  myArray.push(i);
  i--;
}


Q. iterate with JavaScript For Loops
You can run the same code multiple times by using a loop.

The most common type of JavaScript loop is called a for loop because it runs for a specific number of times.

For loops are declared with three optional expressions separated by semicolons:

Ans. // Setup
const myArray = [];

// Only change code below this line

for( let i = 1 ; i < 6; i++){
  myArray.push(i);
};


******************

Q. For loops don't have to iterate one at a time. By changing our final-expression, we can count by even numbers.

We'll start at i = 0 and loop while i < 10. We'll increment i by 2 each loop with i += 2.
Ans. // Setup
const myArray = [];

// Only change code below this line

for (let i = 1; i < 10; i += 2) {
  myArray.push(i);
}

**************

Q. A for loop can also count backwards, so long as we can define the right conditions.

In order to decrement by two each iteration, we'll need to change our initialization, condition, and final expression.

We'll start at i = 10 and loop while i > 0. We'll decrement i by 2 each loop with i -= 2.

Ans. // Setup
const myArray = [];

// Only change code below this line

for (let i = 9; i > 0; i -= 2)  {
  myArray.push(i);
}


***********
Q. A common task in JavaScript is to iterate through the contents of an array. One way to do that is with a for loop. This code will output each element of the array arr to the console:

Ans. // Setup
const myArr = [2, 3, 4, 5, 6];

var total = 0;

// Only change code below this line

for ( let i = 0; i < myArr.lenght; i++); 
total += myArr[i};

***************

Q. A for loop can also count backwards, so long as we can define the right conditions.

In order to decrement by two each iteration, we'll need to change our initialization, condition, and final expression.

Ans. // Setup
const myArray = [];

// Only change code below this line

for (let i = 9; i > 0; i -=2) {
  myArray.push(i);
}
*************
Q. If you have a multi-dimensional array, you can use the same logic as the prior waypoint to loop through both the array and any sub-arrays. Here is an example:
Ans. function multiplyAll(arr) {
  let product = 1;
  // Only change code below this line

for (let i = 0; i < arr.length; i++) {
  for (let j = 0; j < arr[i].length; j++) {
      product *= arr[i][j];

}
}
  // Only change code above this line
  return product;
}

multiplyAll([[1, 2], [3, 4], [5, 6, 7]]);

Q. The next type of loop you will learn is called a do...while loop. It is called a do...while loop because it will first do one pass of the code inside the loop no matter what, and then continue to run the loop while the specified condition evaluates to true.

Ans . // Setup
const myArray = [];
let i = 10;

// Only change code below this line
do {myArray.push(i);
  i++;}
while (i < 5) {
  
}

***************
Q. Recursion is the concept that a function can be expressed in terms of itself. To help understand this, start by thinking about the following task: multiply the first n elements of an array to create the product of those elements. Using a for loop, you could do this:
Ans. function sum(arr, n) {
  // Only change code below this line
if ( n <= 0) {
  return 0;
} else {
  return sum  (arr, n - 1)  + arr[ n - 1];
  
}
  // Only change code above this line
}

*********************
Q. We have an array of objects representing different people in our contacts lists.

A lookUpProfile function that takes name and a property (prop) as arguments has been pre-written for you.

The function should check if name is an actual contact's firstName and the given property (prop) is a property of that contact.

If both are true, then return the "value" of that property.

If name does not correspond to any contacts then return the string No such contact.

If prop does not correspond to any valid properties of a contact found to match name then return the string No such property.

Ans .  // Setup
const contacts = [
  {
    firstName: "Akira",
    lastName: "Laine",
    number: "0543236543",
    likes: ["Pizza", "Coding", "Brownie Points"],
  },
  {
    firstName: "Harry",
    lastName: "Potter",
    number: "0994372684",
    likes: ["Hogwarts", "Magic", "Hagrid"],
  },
  {
    firstName: "Sherlock",
    lastName: "Holmes",
    number: "0487345643",
    likes: ["Intriguing Cases", "Violin"],
  },
  {
    firstName: "Kristian",
    lastName: "Vos",
    number: "unknown",
    likes: ["JavaScript", "Gaming", "Foxes"],
  },
];

function lookUpProfile(name, prop) {
  // Only change code below this line
 for(  var i = 0; i < contacts.length;  i++) {
   if( contacts[i].firstName === name) {
     return contacts[i][prop] || "No such property";
   }

 }

 return "No such contact";
  // Only change code above this line
}

lookUpProfile("Akira", "likes"); 

********************
Q. Random numbers are useful for creating random behavior.

JavaScript has a Math.random() function that generates a random decimal number between 0 (inclusive) and 1 (exclusive). Thus Math.random() can return a 0 but never return a 1.
Ans. function randomFraction() {

  // Only change code below this line

  return Math.random();

  // Only change code above this line
}


Q. It's great that we can generate random decimal numbers, but it's even more useful if we use it to generate random whole numbers.

Use Math.random() to generate a random decimal.
Multiply that random decimal by 20.
Use another function, Math.floor() to round the number down to its nearest whole number.
Ans. function randomWholeNum() {

  // Only change code below this line

  return Math.floor (Math.random() * 10 );
}
****************
Q. Instead of generating a random whole number between zero and a given number like we did before, we can generate a random whole number that falls within a range of two specific numbers.

Ans. function randomRange(myMin, myMax) {
  // Only change code below this line
 
  return  Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;
  // Only change code above this line
} 

*******************
Q. The parseInt() function parses a string and returns an integer. Here's an example:

const a = parseInt("007");
The above function converts the string 007 to the integer 7. If the first character in the string can't be converted into a number, then it returns NaN.

Ans. function convertToInteger(str) {
 return parseInt(str);
}

convertToInteger("56");

*******************
Q. The parseInt() function parses a string and returns an integer. It takes a second argument for the radix, which specifies the base of the number in the string. The radix can be an integer between 2 and 36.

Ans. function convertToInteger(str) {
 return parseInt(str, 2);
}

convertToInteger("10011");
**************

Q. The conditional operator, also called the ternary operator, can be used as a one line if-else expression.

The syntax is a ? b : c, where a is the condition, b is the code to run when the condition returns true, and c is the code to run when the condition returns false.
Ans. function checkEqual(a, b) {
 return a === b ? "Equal" : "Not Equal"
}

checkEqual(1, 2);

*************
Q. In the previous challenge, you used a single conditional operator. You can also chain them together to check for multiple conditions.

The following function uses if, else if, and else statements to check multiple conditions:
Ans. function checkSign(num) {
 return num > 0 ? "positive" : num < 0 ? "negative" : "zero";
}

checkSign(10);
