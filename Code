Q.Golf Code
In the game of Golf, each hole has a par, meaning, the average number of strokes a golfer is expected to make in order to sink the ball in the hole to complete the play. Depending on how far above or below par your strokes are, there is a different nickname.

Your function will be passed par and strokes arguments. Return the correct string according to this table which lists the strokes in order of priority; top (highest) to bottom (lowest):
const names = ["Hole-in-one!", "Eagle", "Birdie", "Par", "Bogey", "Double Bogey", "Go Home!"];

ANS. function golfScore(par, strokes) {
  // Only change code below this line
if (strokes == 1) {
return names[0]
}
else if (strokes <= par - 2) {
  return  names[1]
}
else if (strokes == par - 1 ){
return names[2]
}
else if (strokes == par) {
  return names[3]
}
else if (strokes == par + 1){
  return names[4]
}
else if (strokes == par + 2){
  return names[5]
}
else if (strokes >= par + 3){
  return names[6]
}
  return "Change Me";
  // Only change code above this line
}

golfScore(5, 4);


 *********

Q.In a switch statement you may not be able to specify all possible values as case statements. Instead, you can add the default statement which will be executed if no matching case statements are found. Think of it like the final else statement in an if/else chain.

A default statement should be the last case.

ANS. function switchOfStuff(val) {
  let answer = "";
  // Only change code below this line
switch (val) {
  case "a":
  answer = "apple";
  break;
     
     case "b":
     answer = "bird";
     break;
         
         case "c":
         answer = "cat";
         break;
              default:
                 answer = "stuff";
                 break;


}


  // Only change code above this line
  return answer;
}

switchOfStuff(1);

 ************

Q. If you have many options to choose from, use a switch statement. A switch statement tests a value and can have many case statements which define various possible values. Statements are executed from the first matched case value until a break is encountered.


ANS. function caseInSwitch(val) {
  let answer = "";
  // Only change code below this line
 switch(val) {
   witch(val) {
   case 1:
   answer = "alpha";
   break;
   case 2:
   answer = "beta";
   break;
   case 3:
   answer = "gamma";
   break;
   case 4:
   answer = "delta";
   break;

 }


  // Only change code above this line
  return answer;
}

caseInSwitch(1);


************



Q. Write a switch statement to set answer for the following ranges:
1-3 - Low
4-6 - Mid
7-9 - High

Ans. function sequentialSizes(val) {
  let answer = "";
  // Only change code below this line
 switch(val) {

   case 1:
   case 2:
   case 3:
       answer = "Low";
       break;
    case 4:
    case 5:
    case 6:
       answer = "Mid";
       break;
   case 7:
   case 8:
   case 9:
      answer = "High";
      break;   
 }
 
 
  // Only change code above this line
  return answer;
}

sequentialSizes(1);


********
Q. If you have many options to choose from, a switch statement can be easier to write than many chained if/else if statements. The following:

ANS. function chainToSwitch(val) {
  let answer = "";
  // Only change code below this line

  switch (val) {
    case  "bob": 
    answer = "Marley";
    break;
     case  42:
    answer = "The Answer";
    break;
   case 1: 
    answer = "There is no #1";
    break;
  case 99: 
    answer = "Missed me by this much!";
    break;
   case 7: 
    answer = "Ate Nine";
    break;
  }
  // Only change code above this line
  return answer;

  }
chainToSwitch(7);



***********


Q. You may recall from Comparison with the Equality Operator that all comparison operators return a boolean true or false value.

Sometimes people use an if/else statement to do a comparison, like this:

function isLess(a, b) {
  // Only change code below this line
  
    return  a < b ;
   
  // Only change code above this line
}

isLess(10, 15);

*******

Q. When a return statement is reached, the execution of the current function stops and control returns to the calling location.

ANs. // Setup
function abTest(a, b) {
  // Only change code below this line

if (a < 0 || b < 0) {
  return undefined
}

  // Only change code above this line

  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));
}

abTest(2,2);

*********

Q. Counting Cards
In the casino game Blackjack, a player can determine whether they have an advantage on the next hand over the house by keeping track of the relative number of high and low cards remaining in the deck. This is called Card Counting.

Having more high cards remaining in the deck favors the player. Each card is assigned a value according to the table below. When the count is positive, the player should bet high. When the count is zero or negative, the player should bet low.

Ans. let count = 0;

function cc(card) {
  // Only change code below this line

  switch (card) {

    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
     count++;
     break;
     case 10:
    case "J":
    case "A":
    case "K":
    case "Q":
     count--;
     break;
  }

  var holdbet = "Hold";
  if (count > 0) {
    holdbet = "Bet";
  }

  return count + " " + holdbet;

  // Only change code above this line
}

cc(2); cc(3); cc(7); cc('K'); cc('A');

*********

Q. You may have heard the term object before.

Objects are similar to arrays, except that instead of using indexes to access and modify their data, you access the data in objects through what are called properties.

Objects are useful for storing data in a structured way, and can represent real world objects, like a cat.

Ans. const myDog = {
  // Only change code below this line
 "name": " Bruno",
 "tails": 1,
 "legs": 4,
 "friends": [ "MAngu"]

  // Only change code above this line
};

********

Q. There are two ways to access the properties of an object: dot notation (.) and bracket notation ([]), similar to an array.

Dot notation is what you use when you know the name of the property you're trying to access ahead of time.

Here is a sample of using dot notation (.) to read an object's property:

Ans. // Setup
const testObj = {
  "hat": "ballcap",
  "shirt": "jersey",
  "shoes": "cleats"
};

// Only change code below this line
const hatValue = testObj.hat;      // Change this line
const shirtValue = testObj.shirt;    // Change this line


***********

Q.Accessing Object Properties with Bracket Notation
The second way to access the properties of an object is bracket notation ([]). If the property of the object you are trying to access has a space in its name, you will need to use bracket notation.

However, you can still use bracket notation on object properties without spaces.

Here is a sample of using bracket notation to read an object's property:

Ans. // Setup
const testObj = {
  "an entree": "hamburger",
  "my side": "veggies",
  "the drink": "water"
};

// Only change code below this line
const entreeValue = testObj["an entree"];   // Change this line
const drinkValue = testObj["the drink"];    // Change this line

*********
Q.Accessing Object Properties with Variables
Another use of bracket notation on objects is to access a property which is stored as the value of a variable. This can be very useful for iterating through an object's properties or when accessing a lookup table.

Here is an example of using a variable to access a property:
Ans. // Setup
const testObj = {
  12: "Namath",
  16: "Montana",
  19: "Unitas"
};

// Only change code below this line
const playerNumber = 16;  // Change this line
const player = testObj[playerNumber];   // Change this line


*********

Q. After you've created a JavaScript object, you can update its properties at any time just like you would update any other variable. You can use either dot or bracket notation to update.

Ans. // Setup
// Setup
const myDog = {
  "name": "Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};

// Only change code below this line

myDog.name = "Happy Coder";

************
Q.  You can add new properties to existing JavaScript objects the same way you would modify them.

Here's how we would add a bark property to ourDog:
Ans. const myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};

myDog.bark ="woof";


************

Q. Delete Properties from a JavaScript Object
delete ourDog.bark;

Ans. // Setup
const myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"],
  "bark": "woof"
};

// Only change code below this line

delete myDog.tails;
